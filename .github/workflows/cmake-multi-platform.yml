# This workflow builds on Linux and creates a release for the GitHub repository.
name: Build and Release for Linux

on:
  push:
    branches: [ "test" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      fractalium-version:
        description: 'Version du build'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        build_type: [ Release ]
        c_compiler: [ gcc ]
        cpp_compiler: [ g++ ]

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Install dependencies on Ubuntu
        run: |
          sudo apt-get update
          sudo apt-get install -y qtbase5-dev qt6-base-dev libboost-all-dev libopenmpi-dev

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Package build output
        if: matrix.build_type == 'Release'
        run: |
          cd ${{ steps.strings.outputs.build-output-dir }}
          tar -czf project-release.tar.gz ./*

      - name: Upload artifact for release
        uses: actions/upload-artifact@v3
        with:
          name: project-release
          path: ${{ steps.strings.outputs.build-output-dir }}/project-release.tar.gz

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifact from build
        uses: actions/download-artifact@v4
        with:
          name: project-release

      - name: Extract tag name
        id: extract_tag
        run: |
          # Extract tag name from refs/tags/ or refs/heads/
          ref=${{ github.ref }}
          if [[ "$ref" == refs/tags/* ]]; then
            tag_name=${ref#refs/tags/}
          else
            tag_name=${ref#refs/heads/}
          fi
          echo "tag_name=$tag_name" >> $GITHUB_ENV

      - name: Check if release already exists
        id: check_release
        run: |
          if gh release view ${{ env.tag_name }}; then
            echo "Release already exists."
            echo "release-exists=true" >> $GITHUB_ENV
          else
            echo "Release does not exist."
            echo "release-exists=false" >> $GITHUB_ENV
          fi

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.fractalium-version }}
          name: ${{ github.event.inputs.fractalium-version }}
          draft: false
          prerelease: false
          files: |
            ${{ github.workspace }}/project-release.tar.gz
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}